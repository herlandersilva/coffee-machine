type: edu
custom_name: "Buy, fill, take!"
files:
- name: src/machine/Main.kt
  visible: true
  text: |
    package machine

    fun main() {
        println("Hello, world!")
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        String string;
        TestClue(String s) {
            string = s;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue("take\n"))
                    .setInput("take\n").setTimeLimit(100000),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n1\n"))
                    .setInput("buy\n1\n").setTimeLimit(100000),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n2\n"))
                    .setInput("buy\n2\n").setTimeLimit(100000),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("buy\n3\n"))
                    .setInput("buy\n3\n").setTimeLimit(100000),

                new TestCase<TestClue>()
                    .setAttach(new TestClue("fill\n2001\n510\n101\n21\n"))
                    .setInput("fill\n2001\n510\n101\n21\n").setTimeLimit(100000)
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.trim().split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            String[] clueLines = clue.string.trim().split("\\n");
            String action = clueLines[0].trim();

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0].replace("$", "");
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }


            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            if (water0 != 400 || milk0 != 540 || beans0 != 120
                || cups0 != 9 || money0 != 550) {
                return new CheckResult(false,
                    "Initial setup is wrong: " +
                        "coffee machine should fe filled like " +
                        "stated in the description");
            }

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            if (action.equals("take")) {

                if (diffMilk != 0) {
                    return new CheckResult(false,
                        "After \"take\" action milk " +
                            "amount shouldn't be changed");
                }

                if (diffWater != 0) {
                    return new CheckResult(false,
                        "After \"take\" action water " +
                            "amount shouldn't be changed");
                }

                if (diffBeans != 0) {
                    return new CheckResult(false,
                        "After \"take\" action beans " +
                            "amount shouldn't be changed");
                }

                if (diffCups != 0) {
                    return new CheckResult(false,
                        "After \"take\" action cups " +
                            "amount shouldn't be changed");
                }

                if (money1 != 0) {
                    return new CheckResult(false,
                        "After \"take\" action money " +
                            "amount should be zero");
                }

                return CheckResult.correct();
            }

            else if (action.equals("buy")) {

                String option = clueLines[1].trim();

                if (option.equals("1")) {

                    if (diffWater != -250) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "water amount should be lowered by 250");
                    }

                    if (diffMilk != 0) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "milk amount should not be changed");
                    }

                    if (diffBeans != -16) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "beans amount should be lowered by 16");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 4) {
                        return new CheckResult(false,
                            "After buying the first option " +
                                "money amount should be increased by 4");
                    }

                    return CheckResult.correct();

                }

                else if (option.equals("2")) {

                    if (diffWater != -350) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "water amount should be lowered by 350");
                    }

                    if (diffMilk != -75) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "milk amount should be lowered by 75");
                    }

                    if (diffBeans != -20) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "beans amount should be lowered by 20");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 7) {
                        return new CheckResult(false,
                            "After buying the second option " +
                                "money amount should be increased by 7");
                    }

                    return CheckResult.correct();
                }

                else if (option.equals("3")) {

                    if (diffWater != -200) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "water amount should be lowered by 350");
                    }

                    if (diffMilk != -100) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "milk amount should be lowered by 75");
                    }

                    if (diffBeans != -12) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "beans amount should be lowered by 20");
                    }

                    if (diffCups != -1) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "cups amount should be lowered by 1");
                    }

                    if (diffMoney != 6) {
                        return new CheckResult(false,
                            "After buying the third option " +
                                "money amount should be increased by 7");
                    }

                    return CheckResult.correct();
                }
            }

            else if (action.equals("fill")) {

                int water_ = Integer.parseInt(clueLines[1]);
                int milk_ = Integer.parseInt(clueLines[2]);
                int beans_ = Integer.parseInt(clueLines[3]);
                int cups_ = Integer.parseInt(clueLines[4]);

                if (diffMoney != 0) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "money amount should not be changed");
                }

                if (diffWater != water_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "water amount expected to be increased by " + water_ +
                            " but was increased by " + diffWater);
                }

                if (diffMilk != milk_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "milk amount expected to be increased by " + milk_ +
                            " but was increased by " + diffMilk);
                }

                if (diffBeans != beans_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "beans amount expected to be increased by " + beans_ +
                            " but was increased by " + diffBeans);
                }

                if (diffCups != cups_) {
                    return new CheckResult(false,
                        "After \"fill\" action " +
                            "cups amount expected to be increased by " + cups_ +
                            " but was increased by " + diffCups);
                }


                return CheckResult.correct();

            }

            throw new RuntimeException("Can't check the answer");
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.kt
  visible: true
  text: |-
    package machine

    class CoffeeMachine() {
        private var cups: Int = 0

        fun `How many ingredients to make x cups of coffee`() = this.howManyIngredientsNeedToMakeCoffeeXCups()
        fun `How many supplier the machine has`() = this.howManySupplierTheMachineHas()
        fun `Starting to make a coffee`() = println("Starting to make a coffee")
        fun `Grinding coffee beans`() = println("Grinding coffee beans")
        fun `Boiling water`() = println("Boiling water")
        fun `Mixing boiled water with crushed coffee beans`() = println("Mixing boiled water with crushed coffee beans")
        fun `Pouring coffee into the cup`() = println("Pouring coffee into the cup")
        fun `Pouring some milk into the cup`() = println("Pouring some milk into the cup")
        fun `Coffee is ready!`() = println("Coffee is ready!")

        override fun toString(): String {
            return "For %d cups of coffee you will need:".format(cups)
        }

        private fun howManyIngredientsNeedToMakeCoffeeXCups() {
            this.cups = Util.ask("Write how many cups of coffee you will need:").toInt()
            println(this.toString())
            val stdCoffeeCup = StandardCoffeeCup()
            val customWater: Volume = Volume(
                stdCoffeeCup.waterVolume.ingredient,
                stdCoffeeCup.waterVolume.quantity * cups.toUInt(),
                stdCoffeeCup.waterVolume.unit
            )
            val customMilk: Volume = Volume(
                stdCoffeeCup.milkVolume.ingredient,
                stdCoffeeCup.milkVolume.quantity * cups.toUInt(),
                stdCoffeeCup.milkVolume.unit
            )
            val customCoffeeBeans: Volume = Volume(
                stdCoffeeCup.coffeeVolume.ingredient,
                stdCoffeeCup.coffeeVolume.quantity * cups.toUInt(),
                stdCoffeeCup.coffeeVolume.unit
            )
            val customCoffeeCup = CustomCoffeeCup(customWater, customMilk, customCoffeeBeans)
            println(customCoffeeCup.waterVolume)
            println(customCoffeeCup.milkVolume)
            println(customCoffeeCup.coffeeVolume)
        }

        private fun howManySupplierTheMachineHas() {
            val waterSupplier = Volume(
                Ingredient.WATER,
                Util.ask("Write how many %s of %s the coffee machine has:".format(Unit.ML.desc, Ingredient.WATER.desc)).toUInt(),
                Unit.ML
            )
            val milkSupplier = Volume(
                Ingredient.MILK,
                Util.ask("Write how many %s of %s the coffee machine has:".format(Unit.ML.desc, Ingredient.MILK.desc)).toUInt(),
                Unit.ML
            )
            val coffeeBeansSupplier = Volume(
                Ingredient.COFFEE_BEANS,
                Util.ask("Write how many %s of %s the coffee machine has:".format(Unit.GM.desc, Ingredient.COFFEE_BEANS.desc)).toUInt(),
                Unit.GM
            )
            this.cups = Util.ask("Write how many cups of coffee you will need:").toInt()
            val nimOfCoffeePossible = StandardCoffeeCup().haveManySupplyToMakeCoffee(waterSupplier, milkSupplier, coffeeBeansSupplier)
            when {
                this.cups == nimOfCoffeePossible -> "Yes, I can make that amount of coffee"
                this.cups > nimOfCoffeePossible -> "No, I can make only %d cups of coffee".format(nimOfCoffeePossible)
                else -> "Yes, I can make that amount of coffee (and even %d more than that)".format(nimOfCoffeePossible - this.cups)
            }.also(::println)
        }
    }

    abstract class CoffeeCup {
        abstract val waterVolume: Volume
        abstract val milkVolume: Volume
        abstract val coffeeVolume: Volume
    }

    class CustomCoffeeCup(
        val _waterVolume: Volume,
        val _milkVolume: Volume,
        val _coffeeVolume: Volume
    ) : CoffeeCup() {
        override val waterVolume = _waterVolume
        override val milkVolume = _milkVolume
        override val coffeeVolume = _coffeeVolume
    }

    class StandardCoffeeCup : CoffeeCup() {
        override val waterVolume = Volume(Ingredient.WATER, 200U, Unit.ML)
        override val milkVolume = Volume(Ingredient.MILK, 50U, Unit.ML)
        override val coffeeVolume = Volume(Ingredient.COFFEE_BEANS, 15U, Unit.GM)

        fun haveManySupplyToMakeCoffee(waterSupplier: Volume, milkSupplier: Volume, coffeeBeansSupplier: Volume): Int {
            return listOf(
                waterSupplier.quantity / waterVolume.quantity,
                milkSupplier.quantity / milkVolume.quantity,
                coffeeBeansSupplier.quantity / coffeeVolume.quantity
            ).minOf { it.toInt() }
        }
    }
  learner_created: true
- name: src/machine/Util.kt
  visible: true
  text: |-
    package machine

    object Util {
        private var sendToCheck = true

        fun ask(title: String): String {
            println(title)
            return readln().trim()
        }

        fun readln(): String {
            if (!sendToCheck) {
                print("> ")
            }
            return kotlin.io.readln()
        }

        fun disableToSend() { this.sendToCheck = false }
        fun enableToSend() { this.sendToCheck = true }
    }
  learner_created: true
- name: src/machine/Volume.kt
  visible: true
  text: |-
    package machine

    data class Volume(val ingredient: Ingredient, val quantity: UInt, val unit: machine.Unit) {
        override fun toString(): String {
            return "%d %s of %s".format(quantity.toInt(), unit, ingredient.desc)
        }
    }
  learner_created: true
- name: src/machine/Unit.kt
  visible: true
  text: |-
    package machine

    enum class Ingredient(val desc: String) {
        WATER("water"),
        MILK("milk"),
        COFFEE_BEANS("coffee beans")
    }

    enum class Unit(val desc: String) {
        ML("ml"),
        GM("g")
    }
  learner_created: true
- name: src/machine/Monetary.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5662#comment
status: Unchecked
record: -1
